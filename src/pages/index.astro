---
import PostPreview from "@/components/blog/PostPreview.astro";
import { getAllPosts, sortMDByDate } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import Faqs from "@/components/Faqs.astro";
import Testimonials from '../components/Testimonials.astro';
import Feature from "@/components/Feature.astro";
import Bio from "@/components/Bio.astro";
import { getEntry } from 'astro:content';
import keystaticConfig from '../../keystatic.config';
import { createReader } from '@keystatic/core/reader';
import CTAs from '@/components/CTAs.astro';
import App from "@/components/App.astro";
import InfoBlock from "@/components/InfoBlock.astro";
import Resume from '@/components/Resume.astro';
import YouForm from '@/components/YouForm.astro';
import YouTubeFeed from "@/components/YouTubeFeed.astro";
import ViewModeSwitch from "@/components/ViewModeSwitch.jsx";


import PhotoSection from "@/components/PhotoGallery.astro"
const siteSettings = await getEntry('siteSettings', 'main');
const pwaSettings = await getEntry('pwaSettings', 'index');
const home = await getEntry('home', 'index');
const language = await getEntry('language', 'index');

const homeData = home?.data || {
  sectionOrdering: ['feature', 'bio', 'gallery', 'posts'],
  photosectiontitle: "Photo Gallery",
  locationtitle: "Location",
  faqsectiontitle: "FAQ",
  testimonialtitle: "Testimonials",
  postsectiontitle: "Latest Posts"
};

// Single CTA declaration
const homeCTA = homeData.cta ? await getEntry('CTAs', homeData.cta) : null;

const { defaultView, MAX_POSTS } = siteSettings?.data ?? { defaultView: 'list', MAX_POSTS: 5 };
const reader = createReader(process.cwd(), keystaticConfig);
const resumeSettings = await getEntry('resumeSettings', 'index');
const homepageData = await reader.singletons.home.read();

type PitchData = {
  slug: string;
  tagline: string;
  text1: string;
  text2: string;
  text3: string;
  subheading1: string;
  subheading2: string;
  subheading3: string;
  image: string | null;
  imageAlt: string;
  description: string;
  title: string | null;
  showTitle: boolean;
  divider: string | null;
  divider2: string | null;
  showTwocol: boolean; // Add this line
}
const selectedPitchSlug = homepageData?.pitch;
const selectedPitchSlug2 = homepageData?.pitch2;
const selectedPitchSlug3 = homepageData?.pitch3;

let selectedPitch: PitchData | undefined;
let selectedPitch2: PitchData | undefined;
let selectedPitch3: PitchData | undefined;

if (selectedPitchSlug) {
  const pitchData = await reader.collections.pitches.read(selectedPitchSlug);
  if (pitchData) {
    selectedPitch = {
      slug: selectedPitchSlug,
      tagline: pitchData.tagline ?? '',
      showTitle: !!pitchData.showTitle,
      text1: pitchData.text1 ?? '',
      text2: pitchData.text2 ?? '',
      text3: pitchData.text3 ?? '',
      subheading1: pitchData.subheading1 ?? '',
      subheading2: pitchData.subheading2 ?? '',
      subheading3: pitchData.subheading3 ?? '',
      image: pitchData.image ?? null,
      imageAlt: pitchData.imageAlt ?? '',
      description: pitchData.description ?? '',
      title: pitchData.title ?? null,
      divider: pitchData.divider ?? null,
      divider2: pitchData.divider2 ?? null,
      showTwocol: !!pitchData.showTwocol, // Add this line
    };
  }
}

if (selectedPitchSlug2) {
  const pitchData2 = await reader.collections.pitches.read(selectedPitchSlug2);
  if (pitchData2) {
    selectedPitch2 = {
      slug: selectedPitchSlug2,
      tagline: pitchData2.tagline ?? '',
      showTitle: !!pitchData2.showTitle,
      text1: pitchData2.text1 ?? '',
      text2: pitchData2.text2 ?? '',
      text3: pitchData2.text3 ?? '',
      subheading1: pitchData2.subheading1 ?? '',
      subheading2: pitchData2.subheading2 ?? '',
      subheading3: pitchData2.subheading3 ?? '',
      image: pitchData2.image ?? null,
      imageAlt: pitchData2.imageAlt ?? '',
      description: pitchData2.description ?? '',
      title: pitchData2.title ?? null,
      divider: pitchData2.divider ?? null,
      divider2: pitchData2.divider2 ?? null,
      showTwocol: !!pitchData2.showTwocol, // Add this line
    };
  }
}

if (selectedPitchSlug3) {
  const pitchData3 = await reader.collections.pitches.read(selectedPitchSlug3);
  if (pitchData3) {
    selectedPitch3 = {
      slug: selectedPitchSlug3,
      tagline: pitchData3.tagline ?? '',
      showTitle: !!pitchData3.showTitle,
      text1: pitchData3.text1 ?? '',
      text2: pitchData3.text2 ?? '',
      text3: pitchData3.text3 ?? '',
      subheading1: pitchData3.subheading1 ?? '',
      subheading2: pitchData3.subheading2 ?? '',
      subheading3: pitchData3.subheading3 ?? '',
      image: pitchData3.image ?? null,
      imageAlt: pitchData3.imageAlt ?? '',
      description: pitchData3.description ?? '',
      title: pitchData3.title ?? null,
      divider: pitchData3.divider ?? null,
      divider2: pitchData3.divider2 ?? null,
      showTwocol: !!pitchData3.showTwocol, // Add this line
    };
  }
}

// Change this line from ShowMore = homepage?.showMore to:
const ShowMore = homeData.showMore ?? false;

// ====== YOUTUBE FEED DATA LOADING ======
interface YouTubeFeedData {
  slug: string;
  title: string;
  description?: string;
  channelIds: string[];
  maxVideos: number;
  showTitles: boolean;
  showSectionTitle?: boolean;
  useCustomPlayer: boolean;
  defaultView: 'grid' | 'swipe';
  displayTitle?: string;
  customTitle?: string;
  sectionIndex?: number;
}

// Helper function to load YouTube feed data
async function loadYoutubeFeed(slug: string | undefined): Promise<YouTubeFeedData | undefined> {
  if (!slug) return undefined;
  const feedData = await reader.collections.youtubeFeeds.read(slug);
  if (!feedData) return undefined;
  
  return {
    slug,
    title: feedData.title ?? 'YouTube Videos',
    description: feedData.description ?? undefined,
    channelIds: feedData.channelIds ?? [],
    maxVideos: feedData.maxVideos ?? 6,
    showTitles: feedData.showTitles ?? true,
    showSectionTitle: feedData.showSectionTitle ?? true,
    useCustomPlayer: feedData.useCustomPlayer ?? false,
    defaultView: feedData.defaultView ?? 'grid'
  };
}

// Load dynamic YouTube feed sections
const youtubeFeedSections = await Promise.all(
  (homepageData?.youtubeFeedSections || []).map(async (section, index) => {
    if (!section.feedConfig) return null;
    
    const feedData = await loadYoutubeFeed(section.feedConfig);
    if (!feedData) return null;
    
    return {
      ...feedData,
      customTitle: section.customTitle,
      customDescription: section.customDescription,
      showTitle: section.showTitle ?? true,
      displayTitle: section.customTitle || feedData.title,
      showSectionTitle: feedData.showSectionTitle ?? true,
      sectionIndex: index
    };
  })
);

// Filter out null entries
const validYoutubeFeedSections = youtubeFeedSections.filter(Boolean);

// Legacy support for old single feed section
const legacyYoutubeFeed = await loadYoutubeFeed(homepageData?.youtubeFeedSection);




const allPosts = await getAllPosts();
const allPostsSorted = sortMDByDate(allPosts).slice(0, MAX_POSTS || 5);

const meta = {
	description: "Welcome to my personal website",
	title: "Home",
};
---

<style>
	.scroll-snap-container {
flex-direction: column;
  height: 100%;
  max-width:100vw;
  /* overflow-x: hidden; */
  /* overflow-y: scroll; */
  scroll-snap-type: y proximity;
}
.scroll-snap-container > * {
  scroll-snap-align: start;
}

</style>



<PageLayout
  title={pwaSettings?.data?.title}
  description={pwaSettings?.data?.description}
  themeMode={siteSettings?.data?.themeMode ?? 'user'}>
  





	<div class="scroll-snap-container prose-pirate flex flex-col home">
    
		{(homeData.sectionOrdering || []).map((section, index) => {
			// Handle new object structure for sections
			const sectionType = typeof section === 'string' ? section : section.sectionType;
			const customTitle = typeof section === 'object' ? section.customTitle : null;
			const customDescription = typeof section === 'object' ? section.customDescription : null;
			const showTitle = typeof section === 'object' ? section.showTitle ?? true : true;
			
			const sectionData = { name: sectionType, order: index };
			return (
			<section class={sectionData.name === 'resume' ? 'resume' : ''}>
				{(() => {
					switch (sectionData.name) {
						case 'feature':
							// Use the section's own title/description settings
							const featureTitle = customTitle || "Featured Content";
							const featureDescription = customDescription || "";
							const featureShowTitle = showTitle;
							
							return (
								<>
									{featureShowTitle && (featureTitle || featureDescription) && (
										<div style="text-align: center; margin-bottom: 2rem;">
											{featureTitle && (
												<h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${featureDescription ? '1rem' : '0'};`}>
													{featureTitle}
												</h2>
											)}
											{featureDescription && (
												<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
													{featureDescription}
												</p>
											)}
										</div>
									)}
									<Feature content={{
										title: pwaSettings?.data?.title ?? '',
										youtube: homeData.youtube?.value && homeData.youtube.value.url
											? (() => {
													const { videoOnly, ...rest } = homeData.youtube.value;
													return { ...rest, url: homeData.youtube.value.url };
												})()
											: undefined,
										CTAs: homeCTA ? {
											title: homeCTA.data.title ?? '',
											description: homeCTA.data.description ?? '',
											ctaUrl: homeCTA.data.ctaUrl ?? '',
											showFancy: homeCTA.data.showFancy ?? false,
											showTransition: homeCTA.data.showTransition ?? false
										} : undefined,
										// Only include featureImage if it exists and matches the expected type
										...(homeData.featureImage && typeof homeData.featureImage === 'object'
											? {
													featureImage: {
														src: (homeData.featureImage as any).src ?? '',
														alt: (homeData.featureImage as any).alt ?? '',
														height: (homeData.featureImage as any).height ?? 400,
														width: (homeData.featureImage as any).width ?? 600
													}
												}
											: {})
									}} />
								</>
							);
						case 'bio':
							// Use the section's own title/description settings
							const bioTitle = customTitle || "About";
							const bioDescription = customDescription || "";
							const bioShowTitle = showTitle;
							
							return (
								<>
									{bioShowTitle && (bioTitle || bioDescription) && (
										<div style="text-align: center; margin-bottom: 2rem;">
											{bioTitle && (
												<h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${bioDescription ? '1rem' : '0'};`}>
													{bioTitle}
												</h2>
											)}
											{bioDescription && (
												<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
													{bioDescription}
												</p>
											)}
										</div>
									)}
									<Bio />
								</>
							);
						case 'youform':
							return (
								<YouForm 
									title={homepageData?.youformTitle || ""}
									description={homepageData?.youformDescription || "Paste any YouTube URL to remove ads and get enhanced controls"}
									placeholder={homepageData?.youformPlaceholder || "Paste YouTube URL here..."}
									showTitle={homepageData?.youformShowTitle ?? true}
								/>
							);
						case 'app':
							// Use the section's own title/description settings
							const appTitle = customTitle || "Interactive Map";
							const appDescription = customDescription || "";
							const appShowTitle = showTitle;
							
							return (
								<>
									{appShowTitle && (appTitle || appDescription) && (
										<div style="text-align: center; margin-bottom: 2rem;">
											{appTitle && (
												<h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${appDescription ? '1rem' : '0'};`}>
													{appTitle}
												</h2>
											)}
											{appDescription && (
												<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
													{appDescription}
												</p>
											)}
										</div>
									)}
									<App />
								</>
							);
						case 'gallery':
							// Use the section's own title/description settings
							const galleryTitle = customTitle || "Photo Gallery";
							const galleryDescription = customDescription || "";
							const galleryShowTitle = showTitle;
							
							return (
								<>
									{galleryShowTitle && (galleryTitle || galleryDescription) && (
										<div style="text-align: center; margin-bottom: 2rem;">
											{galleryTitle && (
												<h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${galleryDescription ? '1rem' : '0'};`}>
													{galleryTitle}
												</h2>
											)}
											{galleryDescription && (
												<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
													{galleryDescription}
												</p>
											)}
										</div>
									)}
									<PhotoSection />
								</>
							);
						case 'infoblock':
							return selectedPitch && <InfoBlock pitch={{...selectedPitch, slug: selectedPitch.slug, showTwocol: selectedPitch.showTwocol}} />;
						case 'infoblock2':
							return (
								<>
									{selectedPitch2 && <InfoBlock pitch={{...selectedPitch2, slug: selectedPitch2.slug, showTwocol: selectedPitch2.showTwocol}} />}
								</>
							);
						case 'infoblock3':
							return (
								<>
									{selectedPitch3 && <InfoBlock pitch={{...selectedPitch3, slug: selectedPitch3.slug, showTwocol: selectedPitch3.showTwocol}} />}
								</>
							);
						case 'resume':
							// Use the section's own title/description settings
							const resumeTitle = customTitle || "Resume";
							const resumeDescription = customDescription || "";
							const resumeShowTitle = showTitle;
							
							return (
								<div>
									{resumeShowTitle && (resumeTitle || resumeDescription) && (
										<div style="text-align: center; margin-bottom: 2rem;">
											{resumeTitle && (
												<h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${resumeDescription ? '1rem' : '0'};`}>
													{resumeTitle}
												</h2>
											)}
											{resumeDescription && (
												<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
													{resumeDescription}
												</p>
											)}
										</div>
									)}
									<Resume 
										leftColumnItems={resumeSettings?.data?.leftColumnItems || []}
										rightColumnItems={resumeSettings?.data?.rightColumnItems || []}
									/>
								</div>
							);
              case 'posts':
							// Use the section's own title/description settings
							const postsTitle = customTitle || "Latest Posts";
							const postsDescription = customDescription || "";
							const postsShowTitle = showTitle;
							
							return (
								<div data-section-id="posts-section">
									<div class="posts-header" style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 2rem; padding: 0 3%;">
										{postsShowTitle && postsTitle && (
											<div style="flex: 1;">
												<h2 class="posties glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text theme-accent backdrop-blur-lg" style={`margin: 0; margin-bottom: ${postsDescription ? '1rem' : '0'};`}>
													{postsTitle}
												</h2>
												{postsDescription && (
													<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; margin: 0;">
														{postsDescription}
													</p>
												)}
											</div>
										)}
										<ViewModeSwitch 
											sectionId="posts-section" 
											defaultView={defaultView} 
											client:load
										/>
									</div>
									
									<div style="padding:0 3%" class={`contentpanel section-content ${defaultView === 'swipe' ? 'slider' : 'grid-container'}`}>
										{allPostsSorted.map((p) => <PostPreview post={p} withDesc />)}
										{ShowMore && (
											<a class="viewmore no-underline text-white text-center block" href="/posts/" style="padding:1vh 1rem; margin:0 50px 50px 50px;">
												{language?.data?.viewmore}
											</a>
										)}
									</div>
								</div>
							);
						case 'faq':
							// Use the section's own title/description settings
							const faqTitle = customTitle || "Frequently Asked Questions";
							const faqDescription = customDescription || "";
							const faqShowTitle = showTitle;
							
							return (
								<>
									{faqShowTitle && (faqTitle || faqDescription) && (
										<div style="text-align: center; margin-bottom: 2rem;">
											{faqTitle && (
												<h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${faqDescription ? '1rem' : '0'};`}>
													{faqTitle}
												</h2>
											)}
											{faqDescription && (
												<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
													{faqDescription}
												</p>
											)}
										</div>
									)}
									<Faqs />
								</>
							);
						case 'testimonials':
							// Use the section's own title/description settings
							const testimonialsTitle = customTitle || "What People Say";
							const testimonialsDescription = customDescription || "";
							const testimonialsShowTitle = showTitle;
							
							return (
								<div class="testi" style="">
									{testimonialsShowTitle && (testimonialsTitle || testimonialsDescription) && (
										<div style="text-align: center; margin-bottom: 2rem;">
											{testimonialsTitle && (
												<h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${testimonialsDescription ? '1rem' : '0'};`}>
													{testimonialsTitle}
												</h2>
											)}
											{testimonialsDescription && (
												<p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
													{testimonialsDescription}
												</p>
											)}
										</div>
									)}
									<Testimonials />
								</div>
							);
						default:
							return null;
					}
				})()}

        
			</section>
		)})}
    
    <!-- YouTube Feed Sections -->
    {validYoutubeFeedSections.map((feedData, index) => {
      if (!feedData) return null;
      
      const feedTitle = feedData.customTitle || feedData.title;
      const feedDescription = feedData.customDescription || "";
      const showTitle = feedData.showTitle ?? true;
      
      return (
        <section>
          <div>
            {showTitle && (feedTitle || feedDescription) && (
              <div style="text-align: center; margin-bottom: 2rem;">
                {feedTitle && (
                  <h2 class="glow text-[clamp(1.4rem,3.9vw,4rem)] shadow-text text-center theme-accent backdrop-blur-lg" style={`margin-bottom: ${feedDescription ? '1rem' : '0'};`}>
                    {feedTitle}
                  </h2>
                )}
                {feedDescription && (
                  <p style="font-size: 1.2rem; color: var(--theme-text); opacity: 0.8; max-width: 800px; margin: 0 auto;">
                    {feedDescription}
                  </p>
                )}
              </div>
            )}
            <YouTubeFeed 
              channelIds={feedData.channelIds}
              maxVideos={feedData.maxVideos}
              title={feedTitle}
              showTitles={feedData.showTitles}
              showSectionTitle={false}
              useCustomPlayer={feedData.useCustomPlayer}
              defaultView={feedData.defaultView}
              sectionId={`youtube-feed-${index}`}
            />
          </div>
        </section>
      );
    })}
    

    {homeCTA && (      <section style="display:grid; place-content:center; padding:10vh 0">
      <CTAs 
        title={homeCTA.data.title ?? ''}
        description={homeCTA.data.description || ''}
        ctaUrl={homeCTA.data.ctaUrl ?? ''}
        showFancy={homeCTA.data.showFancy}
        showTransition={homeCTA.data.showTransition}
      />
    </section>
  )}

	</div>
</PageLayout>




