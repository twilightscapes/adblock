---
import YouTubeEmbed from './YouTubeEmbed.astro';

interface Props {
  channelIds: string;
  maxVideos?: number;
  title?: string;
  showTitles?: boolean;
  showSectionTitle?: boolean;
  useCustomPlayer?: boolean;
  defaultView?: string;
  sectionId?: string;
}

const {
  channelIds,
  maxVideos = 5,
  title = "Latest Videos",
  showTitles = true,
  showSectionTitle = true,
  useCustomPlayer = false,
  defaultView = "grid",
  sectionId = "youtube-feed"
} = Astro.props;

// Convert channelIds string to array if needed
const channelIdsArray = Array.isArray(channelIds) ? channelIds : channelIds.split(',').map(id => id.trim());

// Default channels if none provided (popular tech/educational channels)
const defaultChannels = [
  "UCBJycsmduvYEL83R_U4JriQ", // Marques Brownlee
  "UC6nSFpj9HTCZ5t-N3Rm3-HA", // Vsauce
  "UCsooa4yRKGN_zEE8iknghZA"  // TED-Ed
];

const finalChannelIds = channelIdsArray.length > 0 ? channelIdsArray : defaultChannels;

interface YouTubeVideo {
  id: string;
  title: string;
  thumbnail: string;
  publishDate: string;
  description: string;
  channelTitle?: string;
}

async function fetchYouTubeRSS(channelId: string): Promise<YouTubeVideo[]> {
  try {
    console.log(`Fetching RSS for channel: ${channelId}`);
    const rssUrl = `https://www.youtube.com/feeds/videos.xml?channel_id=${channelId}`;
    const response = await fetch(rssUrl);
    
    if (!response.ok) {
      console.warn(`Failed to fetch RSS for channel ${channelId}: ${response.status}`);
      return [];
    }
    
    const xmlText = await response.text();
    console.log(`RSS response length for ${channelId}: ${xmlText.length} characters`);
    const videos: YouTubeVideo[] = [];
    
    // Extract channel title
    const channelTitleMatch = xmlText.match(/<title>(.*?)<\/title>/);
    const channelTitle = channelTitleMatch ? channelTitleMatch[1]
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&amp;/g, '&')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'") : '';
    
    console.log(`Channel title for ${channelId}: ${channelTitle}`);
    
    // Extract video entries
    const entryMatches = xmlText.match(/<entry>(.*?)<\/entry>/gs);
    console.log(`Found ${entryMatches?.length || 0} video entries for ${channelId}`);
    
    if (entryMatches) {
      for (const entry of entryMatches) {
        const videoIdMatch = entry.match(/<yt:videoId>(.*?)<\/yt:videoId>/);
        const titleMatch = entry.match(/<title>(.*?)<\/title>/);
        const publishedMatch = entry.match(/<published>(.*?)<\/published>/);
        const descriptionMatch = entry.match(/<media:description>(.*?)<\/media:description>/);
        
        if (videoIdMatch && titleMatch) {
          const videoId = videoIdMatch[1];
          const title = titleMatch[1]
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&amp;/g, '&')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'");
          
          const description = descriptionMatch ? descriptionMatch[1]
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&amp;/g, '&')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'") : '';
          
          videos.push({
            id: videoId,
            title,
            thumbnail: `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`,
            publishDate: publishedMatch ? publishedMatch[1] : '',
            description: description.substring(0, 150) + '...',
            channelTitle
          });
        }
      }
    }
    
    console.log(`Successfully parsed ${videos.length} videos for ${channelId}`);
    return videos;
  } catch (error) {
    console.error(`Error fetching YouTube RSS for channel ${channelId}:`, error);
    return [];
  }
}

// Fetch videos from all channels
const allVideosPromises = finalChannelIds.map(id => fetchYouTubeRSS(id));
const allVideosArrays = await Promise.all(allVideosPromises);
const allVideos = allVideosArrays.flat();

// Sort by publish date and limit
const sortedVideos = allVideos
  .filter(video => video.publishDate)
  .sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime())
  .slice(0, maxVideos);

---

<style>
  .youtube-feed {
    width: 100%;
    padding: 1rem 0.5rem; /* Reduced padding */
  }
  
  .youtube-feed-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.5rem;
    gap: 1rem;
  }
  
  .youtube-feed-title {
    font-size: clamp(1.8rem, 3vw, 2.5rem);
    font-weight: 700;
    background: linear-gradient(45deg, var(--theme-accent), #FF6B6B);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin: 0;
    flex: 1;
  }
  
  .youtube-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); /* Bigger minimum size, fewer columns */
    gap: 1rem; /* Reduced gap */
    width: 100%; /* Remove max-width constraint */
    margin: 0;
  }
  
  /* Slider/Swipe mode styles */
  .youtube-grid.slider {
    display: flex;
    overflow-x: auto;
    overflow-y: visible;
    scroll-snap-type: none;
    gap: 1rem;
    padding: 0 0.5rem;
    scrollbar-width: thin;
    scrollbar-color: var(--theme-accent, #4CAF50) transparent;
    -webkit-overflow-scrolling: touch;
    /* Ensure scroll events are captured */
    overscroll-behavior-x: contain;
    overscroll-behavior-y: auto;
    /* Add pointer events to ensure wheel events are captured */
    pointer-events: auto;
  }
  
  .youtube-grid.slider::-webkit-scrollbar {
    height: 8px;
  }
  
  .youtube-grid.slider::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 4px;
  }
  
  .youtube-grid.slider::-webkit-scrollbar-thumb {
    background: var(--theme-accent, #4CAF50);
    border-radius: 4px;
  }
  
  .youtube-grid.slider::-webkit-scrollbar-thumb:hover {
    background: var(--theme-accent-hover, #45a049);
  }
  
  .youtube-grid.slider .youtube-video-card {
    flex: 0 0 auto;
    width: 80vw;
    min-width: 80vw;
    scroll-snap-align: center;
  }
  
  /* Grid mode styles */
  .youtube-grid.grid-container .youtube-video-card {
    width: 100%;
  }
  
  .youtube-video-card {
    position: relative;
    width: 100%;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease, border 0.3s ease;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    border: 3px solid transparent;
  }
  
  .youtube-video-card.playing {
    border: 3px solid #ff0000;
    box-shadow: 0 0 20px rgba(255, 0, 0, 0.3);
  }
  
  .youtube-video-container {
    position: relative;
    width: 100%;
    aspect-ratio: 16/9;
  }
  
  .youtube-video-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }
  
  /* Disable hover effects in slider mode to prevent layout jumping */
  .youtube-grid.slider .youtube-video-card:hover {
    transform: none;
    box-shadow: none;
  }
  
  .youtube-thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .youtube-play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border: 2px solid white;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    font-size: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    transition: all 0.3s ease;
    padding-left: 3px; /* Offset to visually center the triangle */
  }
  
  .youtube-play-button:hover {
    background: rgba(255, 0, 0, 0.9);
    transform: translate(-50%, -50%) scale(1.1);
  }
  
  .youtube-video-info {
    padding: 0.75rem; /* Reduced padding */
    background: var(--theme-bg, #fff);
    color: var(--theme-text, #333);
  }
  
  .youtube-video-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .youtube-video-date {
    font-size: 0.9rem;
    opacity: 0.8;
  }
  
  .youtube-meta {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
  }
  
  .youtube-channel {
    font-size: 0.9rem;
    font-weight: 500;
    opacity: 0.9;
    color: var(--theme-accent, #4CAF50);
  }
  
  @media (max-width: 1024px) {
    .youtube-grid {
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); /* Slightly smaller for tablets */
    }
    
    .youtube-grid.slider .youtube-video-card {
      width: 85vw;
      min-width: 85vw;
    }
  }
  
  @media (max-width: 768px) {
    .youtube-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Responsive but still bigger than before */
      gap: 0.75rem;
    }
    
    .youtube-grid.slider .youtube-video-card {
      width: 90vw;
      min-width: 90vw;
    }
    
    .youtube-play-button {
      width: 50px;
      height: 50px;
      font-size: 20px;
    }
    
    .youtube-feed {
      padding: 0.75rem 0.25rem; /* Reduced mobile padding */
    }
  }
  
  @media (max-width: 480px) {
    .youtube-grid {
      grid-template-columns: 1fr; /* Single column on very small screens */
    }
    
    .youtube-grid.slider .youtube-video-card {
      width: 95vw;
      min-width: 95vw;
    }
  }
</style>

{sortedVideos.length > 0 && (
  <div class="youtube-feed" data-section-id={sectionId}>
    <div class="youtube-feed-header">
      {showSectionTitle && <h2 class="youtube-feed-title">{title}</h2>}
    </div>
    <div class={`youtube-grid section-content ${defaultView === 'swipe' ? 'slider' : 'grid-container'}`}>
      {sortedVideos.map((video) => (
        <div class="youtube-video-card">
          <div 
            class="youtube-video-container video-container" 
            data-video-id={video.id}
            data-use-custom-player={useCustomPlayer}
          >
            <img
              src={video.thumbnail}
              alt={video.title}
              class="youtube-thumbnail video-thumbnail"
              loading="lazy"
              width="480"
              height="360"
            />
            
            <div class="youtube-play-button play-button" aria-label="Play video">
              &#x25B6;
            </div>
            
            <div class="youtube-embed" style="display: none;">
              <YouTubeEmbed
                url={`https://www.youtube.com/watch?v=${video.id}`}
                title={video.title}
                useCustomPlayer={useCustomPlayer}
                controls={true}
                mute={false}
                autoplay={false}
              />
            </div>
          </div>
          
          {showTitles && (
            <div class="youtube-video-info">
              <h3 class="youtube-video-title">{video.title}</h3>
              <div class="youtube-meta">
                {video.channelTitle && (
                  <span class="youtube-channel">{video.channelTitle}</span>
                )}
                <time class="youtube-video-date">
                  {new Date(video.publishDate).toLocaleDateString()}
                </time>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
)}

<script>
// Video management for YouTubeFeed component
// This ensures only one video plays at a time and handles play/pause functionality
document.addEventListener('DOMContentLoaded', function() {
  // Function to stop a video by replacing its src or destroying the player
  function stopVideo(container: Element) {
    const embedContainer = container.querySelector('.youtube-embed') as HTMLElement;
    const iframe = embedContainer?.querySelector('iframe') as HTMLIFrameElement;
    const customPlayer = embedContainer?.querySelector('[id^="youtube-player-"]') as HTMLElement;
    
    if (iframe) {
      // Store original src if not already stored
      if (iframe.src !== 'about:blank') {
        iframe.dataset.originalSrc = iframe.src;
      }
      // Set to blank to stop video
      iframe.src = 'about:blank';
    }
    
    if (customPlayer && (window as any).YT && (window as any).YT.get) {
      // For YouTube API players
      const playerId = customPlayer.id;
      const player = (window as any).YT.get(playerId);
      if (player && player.pauseVideo) {
        player.pauseVideo();
      }
    }
  }
  
  document.querySelectorAll('.youtube-video-container').forEach(container => {
    const playButton = container.querySelector('.play-button') as HTMLElement;
    const thumbnail = container.querySelector('.youtube-thumbnail') as HTMLElement;
    const embedContainer = container.querySelector('.youtube-embed') as HTMLElement;
    
    if (playButton && thumbnail && embedContainer) {
      const clickHandler = () => {
        // Stop all other videos first
        document.querySelectorAll('.youtube-video-container').forEach(otherContainer => {
          if (otherContainer !== container) {
            const otherEmbed = otherContainer.querySelector('.youtube-embed') as HTMLElement;
            const otherThumbnail = otherContainer.querySelector('.youtube-thumbnail') as HTMLElement;
            const otherPlayButton = otherContainer.querySelector('.play-button') as HTMLElement;
            const otherCard = otherContainer.closest('.youtube-video-card') as HTMLElement;
            
            if (otherEmbed && otherThumbnail && otherPlayButton && otherCard) {
              // Actually stop the video
              stopVideo(otherContainer);
              // Hide the embed and show thumbnail
              otherEmbed.style.display = 'none';
              otherThumbnail.style.display = 'block';
              otherPlayButton.style.display = 'flex';
              // Remove playing indicator
              otherCard.classList.remove('playing');
            }
          }
        });
        
        // Play this video
        thumbnail.style.display = 'none';
        playButton.style.display = 'none';
        embedContainer.style.display = 'block';
        
        // Add playing indicator to this card
        const currentCard = container.closest('.youtube-video-card') as HTMLElement;
        if (currentCard) {
          currentCard.classList.add('playing');
        }
        
        // If this is an iframe video that was stopped, restore its original src
        const iframe = embedContainer.querySelector('iframe') as HTMLIFrameElement;
        if (iframe && iframe.src === 'about:blank' && iframe.dataset.originalSrc) {
          iframe.src = iframe.dataset.originalSrc;
        }
      };
      
      playButton.addEventListener('click', clickHandler);
      thumbnail.addEventListener('click', clickHandler);
    }
  });
  
  // Apply user mute preferences to all YouTube embeds
  function applyVideoPreferences() {
    const preferences = (window as any).VideoPreferences?.getPreferences() || { muted: false };
    
    // Apply to all iframes in YouTube feeds
    document.querySelectorAll('.youtube-feed iframe').forEach((iframe) => {
      const iframeEl = iframe as HTMLIFrameElement;
      if (iframeEl.src.includes('youtube.com/embed/')) {
        const currentSrc = iframeEl.src;
        const url = new URL(currentSrc);
        
        // Update mute parameter
        if (preferences.muted) {
          url.searchParams.set('mute', '1');
        } else {
          url.searchParams.delete('mute');
        }
        
        // Only update if different
        if (iframeEl.src !== url.toString()) {
          iframeEl.src = url.toString();
        }
      }
    });
  }
  
  // Apply preferences when component loads
  if ((window as any).VideoPreferences) {
    applyVideoPreferences();
  }
  
  // Listen for preference changes
  window.addEventListener('video-preferences-changed', applyVideoPreferences);
});
</script>
</script>
