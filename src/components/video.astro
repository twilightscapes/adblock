---
import { getEntry } from 'astro:content';

// Get site settings for video time limit
const siteSettings = await getEntry('siteSettings', 'main');
const videoTimeLimitMinutes = siteSettings?.data?.videoTimeLimitMinutes ?? 1;
---

<style>
/* html{overflow-x: hidden;} */

input[type="text"], input[type="number"], input[type="email"], input[type="password"] {
font-size: 16px !important;
}

  #menu-bar {
    position: absolute;
    width: 100vw;
    z-index: 10;
    top:0;
    background: rgba(0,0,0,0.85);
    color: #fff;
    display: flex;
    align-items: center;
    gap: 2vw;
    padding: 2px 0;
    justify-content: center;
    font-family: sans-serif !important;
    font-size:10px;
  }
  #menu-bar.hidden { display: none; }
  .menu-input { min-width: 20px; max-width: 400px; padding: 4px; }
  .menu-checkbox { margin-left: 8px; }
  .menu-label { font-size: 0.95em; }

    #checkboxes {
justify-content: center !important;
align-items: center !important;
width: 100%;
margin: 0 auto;
text-align: center;
}
#checkboxes .menu-label {
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
text-align: center;
width: 70px;
}

  #video-frame {
    position: absolute;
    top:54px;
    width: 100vw;
    /* height: 100vh; */
    aspect-ratio: 16/9;
    border: none;
    z-index: 1;
  }
@media (max-width: 38rem) {
  #bigbox{display:flex; flex-direction: column !important; padding:10px 0 0 0; gap:2vh;}
  .menu-label { font-size: 1.8em; justify-content: center; align-items: center; align-content: center; }
#checkboxes .menu-label {width: 18vw;}
  
}

  #start-input, #stop-input {max-width:30px; border:0px solid red;}
  #share-link { color: #fff; font-size: 0.9em; word-break: break-all; margin-left: 12px; }
  #copy-btn { margin-left: 8px; }
  
  /* Membership status indicator */
  #membership-status {
    position: relative;
    min-width: 120px;
    background: rgba(76, 175, 80, 0.9);
    color: white;
    padding: 2px 4px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: bold;
    z-index: 20;
    align-content: center;
    justify-content: center;
    text-align: center;
    max-width: 120px;
    margin:2px auto;
  }
  
  #membership-status.free {
    background: rgba(255, 193, 7, 0.9);
    color: #333;
  }
</style>

<script define:vars={{ videoTimeLimitMinutes }}>
// Utility: Extract YouTube video ID from URL or ID
function extractVideoId(input) {
  if (!input) return null;
  if (/^[a-zA-Z0-9_-]{11}$/.test(input)) return input;
  let match = input.match(/youtu\.be\/([a-zA-Z0-9_-]{11})/);
  if (match) return match[1];
  match = input.match(/[?&]v=([a-zA-Z0-9_-]{11})/);
  if (match) return match[1];
  match = input.match(/\/(embed|v)\/([a-zA-Z0-9_-]{11})/);
  if (match) return match[2];
  match = input.match(/([a-zA-Z0-9_-]{11})/);
  if (match) return match[1];
  return null;
}

// Timer-based playback limitation for video toolbar
let videoToolbarPlaybackTimer = null;
let videoToolbarPlaybackStartTime = null;
let videoToolbarElapsedTime = 0;
// Use global timer flag for consistency with YouTubeEmbed
if (!window.videoToolbarTimerExpired) {
  window.videoToolbarTimerExpired = false;
}
const PLAYBACK_LIMIT_MS = videoTimeLimitMinutes * 60000; // Convert minutes to milliseconds

// Membership system
function checkMembership() {
  const cookies = document.cookie.split(';');
  for (let cookie of cookies) {
    const [name, value] = cookie.trim().split('=');
    if (name === 'video_membership') {
      try {
        const membershipData = JSON.parse(decodeURIComponent(value));
        // Check if membership is valid (not expired)
        if (membershipData.expires > Date.now()) {
          return true;
        }
      } catch (e) {
        // Invalid cookie, remove it
        document.cookie = 'video_membership=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
      }
    }
  }
  return false;
}

function setMembership(membershipToken) {
  // Set cookie to expire in 1 year
  const expires = new Date();
  expires.setFullYear(expires.getFullYear() + 1);
  
  const membershipData = {
    token: membershipToken,
    expires: expires.getTime(),
    activated: Date.now()
  };
  
  document.cookie = `video_membership=${encodeURIComponent(JSON.stringify(membershipData))}; expires=${expires.toUTCString()}; path=/; SameSite=Strict`;
}

function resetMembership() {
  document.cookie = 'video_membership=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
  location.reload();
}

function updateMembershipStatus() {
  const statusEl = document.getElementById('membership-status');
  if (!statusEl) return;
  
  if (checkMembership()) {
    statusEl.textContent = 'âœ“ Premium Member';
    statusEl.className = '';
  } else {
    // Handle different timer states
    if (videoTimeLimitMinutes === -1) {
      statusEl.textContent = 'ðŸ†“ Free (No time limit)';
      statusEl.className = 'free';
    } else if (videoTimeLimitMinutes === 0) {
      statusEl.textContent = 'ðŸ”’ Paywall Active';
      statusEl.className = 'free';
    } else {
      statusEl.textContent = `âš  Free (${videoTimeLimitMinutes} min limit)`;
      statusEl.className = 'free';
    }
  }
}

function startPlaybackTimer() {
  console.log('video.astro: startPlaybackTimer called');
  
  // Don't start timer if it already expired
  if (window.videoToolbarTimerExpired) {
    console.log('video.astro: Timer already expired, not starting new timer');
    showUpgradeMessage();
    return;
  }
  
  // Skip timer if user has membership
  if (checkMembership()) {
    console.log('video.astro: Timer skipped - user has membership');
    return;
  }
  
  // Skip timer if disabled (-1)
  if (videoTimeLimitMinutes === -1) {
    console.log('video.astro: Timer skipped - disabled (-1)');
    return;
  }
  
  // Show immediate paywall if set to 0
  if (videoTimeLimitMinutes === 0) {
    console.log('video.astro: Timer set to 0 - showing immediate paywall');
    // Show paywall immediately, no delay
    setTimeout(() => {
      showUpgradeMessage();
    }, 100); // Very short delay to ensure UI is ready
    return;
  }
  
  // Only start timer if there's actually a video loaded and it's a YouTube video
  const videoFrameEl = document.getElementById('video-frame');
  if (!videoFrameEl || 
      !videoFrameEl.src || 
      videoFrameEl.src === '' || 
      videoFrameEl.src === 'about:blank' ||
      !videoFrameEl.src.includes('youtube.com/embed/')) {
    console.log('video.astro: Timer skipped - no valid video loaded');
    return;
  }
  
  console.log('video.astro: Starting timer for', videoTimeLimitMinutes, 'minutes');
  
  if (videoToolbarPlaybackTimer) {
    clearTimeout(videoToolbarPlaybackTimer);
  }
  
  videoToolbarPlaybackStartTime = Date.now() - videoToolbarElapsedTime;
  const remainingTime = PLAYBACK_LIMIT_MS - videoToolbarElapsedTime;
  
  if (remainingTime > 0) {
    console.log('video.astro: Setting timer for', remainingTime, 'ms');
    videoToolbarPlaybackTimer = setTimeout(() => {
      console.log('video.astro: Timer expired');
      showUpgradeMessage();
    }, remainingTime);
  } else {
    console.log('video.astro: Timer already expired, showing upgrade message');
    showUpgradeMessage();
  }
}

function stopPlaybackTimer() {
  if (videoToolbarPlaybackTimer) {
    clearTimeout(videoToolbarPlaybackTimer);
    videoToolbarPlaybackTimer = null;
  }
  if (videoToolbarPlaybackStartTime) {
    videoToolbarElapsedTime += Date.now() - videoToolbarPlaybackStartTime;
    videoToolbarPlaybackStartTime = null;
  }
}

function resetPlaybackTimer() {
  stopPlaybackTimer();
  videoToolbarElapsedTime = 0;
  window.videoToolbarTimerExpired = false; // Reset the flag
  hideUpgradeMessage();
}

function showUpgradeMessage() {
  console.log('video.astro: showUpgradeMessage called');
  
  // Set flag to prevent timer loops
  window.videoToolbarTimerExpired = true;
  
  // Stop any running timer
  if (videoToolbarPlaybackTimer) {
    clearTimeout(videoToolbarPlaybackTimer);
    videoToolbarPlaybackTimer = null;
  }
  
  // Clear the playback timer first
  if (playbackTimer) {
    clearInterval(playbackTimer);
    playbackTimer = null;
  }

  const videoFrame = document.getElementById('video-frame');
  if (videoFrame) {
    // Store the current src for potential restoration
    const currentSrc = videoFrame.src;
    
    // Multiple methods to stop video playback
    videoFrame.style.display = 'none';
    
    // First, try to pause YouTube video via postMessage
    try {
      videoFrame.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
      videoFrame.contentWindow.postMessage('{"event":"command","func":"stopVideo","args":""}', '*');
    } catch (e) {
      console.log('Could not send pause command to YouTube iframe');
    }
    
    // Then clear the src and force reload with empty content
    videoFrame.src = 'about:blank';
    
    // Additional measure: remove and recreate iframe after a brief delay
    setTimeout(() => {
      if (videoFrame.parentNode) {
        const newFrame = videoFrame.cloneNode(false);
        newFrame.src = 'about:blank';
        videoFrame.parentNode.replaceChild(newFrame, videoFrame);
      }
    }, 100);
  }
  
  // Create or update upgrade message
  let upgradeMessage = document.getElementById('upgrade-message');
  if (!upgradeMessage) {
    upgradeMessage = document.createElement('div');
    upgradeMessage.id = 'upgrade-message';
    upgradeMessage.style.cssText = `
      position: absolute;
      top: 60px;
      left: 0;
      width: 100vw;
      height: calc(100vh - 60px);
      height:auto;
      background: #222;
      color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 5;
      font-size: 1.5em;
      text-align: center;
      padding: 20px;
    `;
    document.body.appendChild(upgradeMessage);
  }
  
  upgradeMessage.innerHTML = `
    <div style="max-width: 800px;">
      <h2 style="margin-bottom: 20px; font-size: 2em;">${videoTimeLimitMinutes}-Minute Limit Reached</h2>
      <p style="margin-bottom: 30px;">Your free viewing time has expired.</p>
      <p style="margin-bottom: 30px; font-size: 1.1em; color: #4CAF50;">
        ðŸŽ¬ Get unlimited video access for just <strong>$4.99</strong> (one-time payment)
      </p>
      <button id="upgrade-btn" style="
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 1.2em;
        border-radius: 8px;
        cursor: pointer;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        transition: all 0.3s ease;
      " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
        ðŸ”“ Upgrade Now - $4.99
      </button>
      <br />
      <p style="font-size: 0.8em; opacity: 0.7; margin-top: 20px;">
        âœ“ Lifetime access â€¢ âœ“ No monthly fees â€¢ âœ“ Instant activation
      </p>
    </div>
  `;
  upgradeMessage.style.display = 'flex';
  
  // Add click handler for upgrade button
  const upgradeBtn = document.getElementById('upgrade-btn');
  if (upgradeBtn) {
    upgradeBtn.addEventListener('click', initializeStripePayment);
  }
}

// Stripe payment integration
function initializeStripePayment() {
  // TODO: Replace with your actual Stripe publishable key
  const STRIPE_PUBLIC_KEY = 'pk_test_your_stripe_key_here';
  
  // Load Stripe.js if not already loaded
  if (!window.Stripe) {
    const script = document.createElement('script');
    script.src = 'https://js.stripe.com/v3/';
    script.onload = () => createStripeCheckout();
    document.head.appendChild(script);
  } else {
    createStripeCheckout();
  }
}

function createStripeCheckout() {
  // TODO: Replace with your actual Stripe publishable key
  const stripe = window.Stripe('pk_test_your_stripe_key_here');
  
  // Create checkout session
  fetch('/api/create-checkout-session', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      priceId: 'price_your_price_id_here', // Replace with your Stripe price ID
    }),
  })
  .then(response => response.json())
  .then(session => {
    return stripe.redirectToCheckout({ sessionId: session.id });
  })
  .then(result => {
    if (result.error) {
      console.error('Stripe error:', result.error.message);
    }
  })
  .catch(error => {
    console.error('Payment error:', error);
  });
}

function hideUpgradeMessage() {
  const videoFrame = document.getElementById('video-frame');
  if (videoFrame) {
    videoFrame.style.display = 'block';
    // Note: The video src will be restored when updateVideoAndLink() is called
  }
  
  const upgradeMessage = document.getElementById('upgrade-message');
  if (upgradeMessage) {
    upgradeMessage.style.display = 'none';
  }
  
  // Reset timer flag when user upgrades or dismisses message
  window.videoToolbarTimerExpired = false;
}

// Function to setup iframe message listener for video events
function setupVideoEventListeners() {
  const videoFrameEl = document.getElementById('video-frame');
  if (!videoFrameEl) return;
  
  // Start timer when iframe loads with actual video content (but not on initial empty load)
  videoFrameEl.addEventListener('load', () => {
    console.log('Video loaded, src:', videoFrameEl.src);
    
    // Check if this is a real video load with an actual video ID
    if (videoFrameEl.src && 
        videoFrameEl.src !== '' && 
        videoFrameEl.src !== 'about:blank' &&
        videoFrameEl.src.includes('youtube.com/embed/') &&
        videoFrameEl.src.includes('/embed/') &&
        videoFrameEl.src.split('/embed/')[1] && 
        videoFrameEl.src.split('/embed/')[1].length > 5) { // Ensure there's an actual video ID
      
      console.log('Valid YouTube video detected, starting timer in 1.5s');
      // Start timer after a delay to allow video to start playing
      setTimeout(() => {
        console.log('Starting timer for video:', videoFrameEl.src);
        startPlaybackTimer();
      }, 1500);
    } else {
      console.log('Skipping timer - not a valid YouTube video or empty iframe');
    }
  });
  
  // Also listen for user interaction as backup
  document.addEventListener('click', (event) => {
    const target = event.target;
    if (target && target.closest('#video-frame')) {
      const videoFrameEl = document.getElementById('video-frame');
      // Only start timer if there's actually a video loaded and it's a YouTube video
      if (videoFrameEl && 
          videoFrameEl.src && 
          videoFrameEl.src !== '' && 
          videoFrameEl.src !== 'about:blank' &&
          videoFrameEl.src.includes('youtube.com/embed/') &&
          videoFrameEl.src.split('/embed/')[1] && 
          videoFrameEl.src.split('/embed/')[1].length > 5) {
        // User clicked on video frame, ensure timer is started
        console.log('User clicked video, starting timer');
        setTimeout(() => {
          startPlaybackTimer();
        }, 500);
      }
    }
  });
}

// Update video and query string
function updateVideoAndLink() {
  const videoInputEl = document.getElementById('video-input');
  const startInputEl = document.getElementById('start-input');
  const stopInputEl = document.getElementById('stop-input');
  const loopCheckboxEl = document.getElementById('loop-checkbox');
  const muteCheckboxEl = document.getElementById('mute-checkbox');
  const controlsCheckboxEl = document.getElementById('controls-checkbox');
  const autoplayCheckboxEl = document.getElementById('autoplay-checkbox');
  const hideMenuCheckboxEl = document.getElementById('hide-menu-checkbox');
  const videoFrameEl = document.getElementById('video-frame');
  const shareLinkEl = document.getElementById('share-link');

  const videoInput = videoInputEl ? videoInputEl.value.trim() : '';
  const start = startInputEl ? startInputEl.value.trim() : '';
  const stop = stopInputEl ? stopInputEl.value.trim() : '';
  const loop = loopCheckboxEl ? loopCheckboxEl.checked : true;
  const mute = muteCheckboxEl ? muteCheckboxEl.checked : true;
  const controls = controlsCheckboxEl ? controlsCheckboxEl.checked : true;
  const autoplay = autoplayCheckboxEl ? autoplayCheckboxEl.checked : true;
  const hideMenu = hideMenuCheckboxEl ? hideMenuCheckboxEl.checked : false;

  const videoId = extractVideoId(videoInput);
  
  // Reset timer when video changes
  if (videoId) {
    resetPlaybackTimer();
  } else {
    stopPlaybackTimer();
  }
  
  let embedUrl = '';
  if (videoId) {
    embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=${autoplay ? 1 : 0}&controls=${controls ? 1 : 0}&mute=${mute ? 1 : 0}&modestbranding=1`;
    if (start) embedUrl += `&start=${parseFloat(start)}`;
    if (stop) embedUrl += `&end=${parseFloat(stop)}`;
    if (loop) embedUrl += `&loop=1&playlist=${videoId}`;
  }
  
  // Only set iframe src if there's actually a video URL
  if (videoFrameEl && 'src' in videoFrameEl) {
    if (embedUrl) {
      videoFrameEl.src = embedUrl;
      // Reset and prepare timer when new video is loaded
      resetPlaybackTimer();
      // Start timer after short delay to allow autoplay to begin
      setTimeout(() => {
        if (!checkMembership() && videoTimeLimitMinutes !== -1) {
          console.log('Starting timer from updateVideoAndLink for:', embedUrl);
          startPlaybackTimer();
        }
      }, 2000); // 2 second delay to ensure video starts playing
    } else {
      // Clear the iframe if no video
      videoFrameEl.src = 'about:blank';
      resetPlaybackTimer(); // Stop timer when no video
    }
  }

  // Build query string
  const params = new URLSearchParams();
  if (videoInput) params.set('video', videoInput);
  if (start) params.set('start', start);
  if (stop) params.set('stop', stop);
  if (loop) params.set('loop', 'true');
  if (mute) params.set('mute', 'true');
  if (controls) params.set('controls', 'true');
  if (autoplay) params.set('autoplay', 'true');
  if (hideMenu) params.set('hideControlsMenu', 'true');
  const shareUrl = `${window.location.origin}${window.location.pathname}?${params.toString()}`;
  if (shareLinkEl) shareLinkEl.textContent = shareUrl;
}

// Copy link logic
function copyShareLink() {
  const shareLinkEl = document.getElementById('share-link');
  const copyBtnEl = document.getElementById('copy-btn');
  const link = shareLinkEl && 'textContent' in shareLinkEl ? shareLinkEl.textContent : '';
  if (link) {
    navigator.clipboard.writeText(link).then(() => {
      if (copyBtnEl && 'textContent' in copyBtnEl) {
        copyBtnEl.textContent = 'Link Copied';
        setTimeout(() => { if (copyBtnEl) copyBtnEl.textContent = 'Copy Link'; }, 1500);
      }
    });
  }
}

// On load: initialize from query string
window.addEventListener('DOMContentLoaded', () => {
  const params = new URLSearchParams(window.location.search);
  
  // Check for membership activation token
  const membershipToken = params.get('membership');
  if (membershipToken) {
    setMembership(membershipToken);
    // Remove the token from URL for security
    const newUrl = window.location.origin + window.location.pathname;
    window.history.replaceState({}, document.title, newUrl);
    
    // Update membership status display
    updateMembershipStatus();
    
    // Show success message
    const successMessage = document.createElement('div');
    successMessage.style.cssText = `
      position: fixed;
      top: 200px;
      right: 200px;
      background: #4CAF50;
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      z-index: 1000;
      box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    `;
    successMessage.textContent = 'âœ“ Membership activated! Enjoy unlimited video access.';
    document.body.appendChild(successMessage);
    
    setTimeout(() => {
      successMessage.remove();
    }, 5000);
  }
  
  // Check for membership reset
  const resetMembershipParam = params.get('reset_membership');
  if (resetMembershipParam === 'true') {
    resetMembership();
  }
  
  const videoInputEl = document.getElementById('video-input');
  const startInputEl = document.getElementById('start-input');
  const stopInputEl = document.getElementById('stop-input');
  const loopCheckboxEl = document.getElementById('loop-checkbox');
  const muteCheckboxEl = document.getElementById('mute-checkbox');
  const controlsCheckboxEl = document.getElementById('controls-checkbox');
  const autoplayCheckboxEl = document.getElementById('autoplay-checkbox');
  const hideMenuCheckboxEl = document.getElementById('hide-menu-checkbox');
  const menuBarEl = document.getElementById('menu-bar');

  if (videoInputEl) videoInputEl.value = params.get('video') || '';
  if (startInputEl) startInputEl.value = params.get('start') || '';
  if (stopInputEl) stopInputEl.value = params.get('stop') || '';
  if (loopCheckboxEl) loopCheckboxEl.checked = params.get('loop') !== 'false';
  if (muteCheckboxEl) muteCheckboxEl.checked = params.get('mute') !== 'false';
  if (controlsCheckboxEl) controlsCheckboxEl.checked = params.get('controls') !== 'false';
  if (autoplayCheckboxEl) autoplayCheckboxEl.checked = params.get('autoplay') !== 'false';
  if (hideMenuCheckboxEl) hideMenuCheckboxEl.checked = params.get('hideControlsMenu') === 'true';

  const hideControlsMenu = params.get('hideControlsMenu') === 'true';
  if (hideControlsMenu && menuBarEl) {
    menuBarEl.classList.add('hidden');
  }
  
  // Setup video event listeners
  setupVideoEventListeners();
  
  // Update membership status display
  updateMembershipStatus();
  
  updateVideoAndLink();

  // Add listeners
  document.querySelectorAll('#menu-bar input').forEach(el => {
    el.addEventListener('input', updateVideoAndLink);
    el.addEventListener('change', updateVideoAndLink);
  });
  const copyBtnEl = document.getElementById('copy-btn');
  if (copyBtnEl) copyBtnEl.addEventListener('click', copyShareLink);
});

document.addEventListener('DOMContentLoaded', () => {
  const clearBtn = document.getElementById('clear-btn');
  if (clearBtn) {
    clearBtn.addEventListener('click', () => {
      const videoInputEl = document.getElementById('video-input');
      const startInputEl = document.getElementById('start-input');
      const stopInputEl = document.getElementById('stop-input');
      const loopCheckboxEl = document.getElementById('loop-checkbox');
      const muteCheckboxEl = document.getElementById('mute-checkbox');
      const controlsCheckboxEl = document.getElementById('controls-checkbox');
      const autoplayCheckboxEl = document.getElementById('autoplay-checkbox');
      const hideMenuCheckboxEl = document.getElementById('hide-menu-checkbox');

      if (videoInputEl) videoInputEl.value = '';
      if (startInputEl) startInputEl.value = '';
      if (stopInputEl) stopInputEl.value = '';
      if (loopCheckboxEl) loopCheckboxEl.checked = true;
      if (muteCheckboxEl) muteCheckboxEl.checked = true;
      if (controlsCheckboxEl) controlsCheckboxEl.checked = true;
      if (autoplayCheckboxEl) autoplayCheckboxEl.checked = true;
      if (hideMenuCheckboxEl) hideMenuCheckboxEl.checked = false;

      // Reset the timer when clearing
      resetPlaybackTimer();
      updateVideoAndLink();
    });
  }
});
</script>

<div id="menu-bar">
  <div id="bigbox" style="display: flex;">
    <div id="timers" style="display: flex; flex-direction:row; gap: 10px; align-items: center; width:100%; padding:0 10px 0 5px;">
      <input type="text" id="video-input" class="menu-input" placeholder="Paste Link" style="padding: .5vh .2vw; min-width:105px; width: 100%; max-width: 500px; text-align:center; font-size: clamp(.6rem,1vw,1rem); transition: all .4s ease-in-out; background:rgba(0,0,0,.2); color:#ddd; outline:1px solid #999; border:1px solid var(--theme-ui-colors-siteColor);" aria-label="Paste Link To Video" />
      <input type="text" id="start-input" class="menu-input" placeholder="Start" style="padding: .5vh .2vw; min-width:40px; width: 40px; max-width: 500px; text-align:center; font-size: clamp(.6rem,1vw,1rem); transition: all .4s ease-in-out; background:rgba(0,0,0,.2); color:#ddd; outline:1px solid #999; border:1px solid var(--theme-ui-colors-siteColor);" aria-label="Video Start Time" />
      <input type="text" id="stop-input" class="menu-input" placeholder="Stop" style="padding: .5vh .2vw; min-width:40px; width: 40px; max-width: 500px; text-align:center; font-size: clamp(.6rem,1vw,1rem); transition: all .4s ease-in-out; background:rgba(0,0,0,.2); color:#ddd; outline:1px solid #999; border:1px solid var(--theme-ui-colors-siteColor);" aria-label="Video Stop Time" />
    </div>

    <div id="checkboxes" style="display: flex; flex-direction:row; gap: 5px; align-items: center; padding:0 10px 5px 0; justify-content:center; background:rgba(0,0,0,.1); outline:0px solid #777; border-radius:var(--theme-ui-colors-borderRadius); font-size:clamp(.5rem,1.2vw,1rem);">
      <label class="menu-label">Loop<br />
        <input type="checkbox" id="loop-checkbox" class="menu-checkbox" checked />
      </label>
      <label class="menu-label">Mute<br />
        <input type="checkbox" id="mute-checkbox" class="menu-checkbox" checked />
      </label>
      <label class="menu-label">Controls<br />
        <input type="checkbox" id="controls-checkbox" class="menu-checkbox" checked />
      </label>
      <label class="menu-label">Autoplay<br />
        <input type="checkbox" id="autoplay-checkbox" class="menu-checkbox" />
      </label>
      <label class="menu-label">Hide<br />
        <input type="checkbox" id="hide-menu-checkbox" class="menu-checkbox" />
      </label>
    </div>

    <div id="pastebox" style="display: none; flex-direction:row; gap: 2vw; align-items: center; justify-content:center; width:100%;">
      <span id="share-link"></span>
    </div>

    <button id="copy-btn" class="button font print" aria-label="Create Link" style="display: flex; gap: .5vw; justify-content: center; padding: .6vh 3vw; width: auto; min-width: 60px; max-width: 100px; margin: 0 auto; text-align: center; outline: 1px solid #6B1D1D; font-size: 11px; font-weight: light; text-shadow: 0 1px 0 #444; margin-left: ;">
      Copy Link
    </button>

    <button id="clear-btn" aria-label="Clear Form" style="margin-left: 5px; padding: .6vh .5vw; min-width:60px; font-size:14px; outline:none; border:none;background:transparent; color:#ddd">
      Clear
    </button>

    <div id="membership-status"></div>
  </div>
</div>
<iframe id="video-frame" allow="autoplay; fullscreen"></iframe>
