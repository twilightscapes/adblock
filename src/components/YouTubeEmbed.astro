---
import { getEntry } from 'astro:content';

const language = await getEntry('language', 'index');

// Get site settings for video time limit
const siteSettings = await getEntry('siteSettings', 'main');
const videoTimeLimitMinutes = siteSettings?.data?.videoTimeLimitMinutes ?? 1;


interface Props {
  url: string;
  title?: string;
  controls?: boolean;
  mute?: boolean;
  loop?: boolean;
  start?: number;
  end?: number;
  useCustomPlayer?: boolean;
}


const { 
  url = '', 
  title = '', 
  controls = true, 
  mute = false, 
  loop = false, 
  start = typeof Astro.props.start === 'number' ? Astro.props.start : 0,
  end = 0,
  useCustomPlayer = true 
} = Astro.props;

function getYouTubeId(url: string) {
  if (!url) return null;
  const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
  const match = url.match(regex);
  return match ? match[1] : null;
}

const videoId = getYouTubeId(url);
const playerVars: { [key: string]: number | string } = {
  autoplay: 1,
  controls: controls ? 1 : 0,
  mute: mute ? 1 : 0,
  loop: loop ? 1 : 0,
  start: start,
  end: end > 0 ? end : '',
  playlist: videoId ?? '',
};




---

{useCustomPlayer ? (
  <div class="custom-youtube-player" style="display:flex; justify-content:center;">
  <div id="youtube-player" style="width:100%; aspect-ratio:16/9;"></div>
    <div class="custom-controls">
      <div class="topblock"></div>
      
      <div class="center-controls">
        <button id="play-pause" class="play-pause-button">‚ñ∫</button>
        {title && <h2 class="video-title title1">{title}</h2>}
      </div>
      <div class="bottom-tray" style="">

        <label for="progress" style="width:100%;">{language?.data?.progress || 'Progress'}
          <span style="width:100%; padding:1.5vh 1rem; background:#111; border-radius:var(--border-radius);"><input type="range" id="progress" min="0" max="100" value="0" class="progress-bar"></span>
        </label>

        <label for="volume">{language?.data?.volume || 'Volume'}
        <span style="padding:1.5vh 1rem; background:#111; border-radius:var(--border-radius);"><input type="range" id="volume" min="0" max="100" value="100" class="volume-slider"></span></label>
              
      <label for="mute-icon" style="" class="mute-label">
        {language?.data?.mute || 'Mute'}
        <span style="padding:.3vh .5rem; background:#111; border-radius:var(--border-radius);">
        <button id="mute" class="control-button" style="padding-top:3px;">
      <svg id="mute-icon" viewBox="0 0 16 16" height="16px" width="16px" xmlns="http://www.w3.org/2000/svg">
      <path d="M6.5 15c-0.13 0-0.258-0.051-0.354-0.146l-3.854-3.854h-1.793c-0.276 0-0.5-0.224-0.5-0.5v-5c0-0.276 0.224-0.5 0.5-0.5h1.793l3.854-3.854c0.143-0.143 0.358-0.186 0.545-0.108s0.309 0.26 0.309 0.462v13c0 0.202-0.122 0.385-0.309 0.462-0.062 0.026-0.127 0.038-0.191 0.038z"></path>
      </svg>
      </button>
      </span>
    </label>
      </div>      

      <div class="botblock"></div>
    </div>
  </div>
) : (
  <div class="iframe-youtube-player" style="position: relative; width: 100%; aspect-ratio: 16/9;">
    <iframe
      id="youtube-iframe"
      width="100%"
      height="100%"
      src={`https://www.youtube.com/embed/${videoId}?autoplay=1&playlist=${videoId}&controls=${controls ? 1 : 0}&mute=${mute ? 1 : 0}&loop=${loop ? 1 : 0}&start=${start}&end=${end}&amp;playsinline=1&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;fs=0&amp;endscreen=0`}
      title={title}
      frameborder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen
      style="aspect-ratio: 16/9;"
    ></iframe>
  </div>
)}

<script define:vars={{ videoId, playerVars, start, end, loop, videoTimeLimitMinutes }}>
  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  let player;
  let controlsTimeout;

  // Timer-based playback limitation for YouTube embeds
  // Create unique instance variables using video ID to avoid conflicts
  const instanceId = `youtube-embed-${videoId || Math.random().toString(36).substring(7)}`;
  let youtubeEmbedPlaybackTimer = null;
  let youtubeEmbedPlaybackStartTime = null;
  let youtubeEmbedElapsedTime = 0;
  const PLAYBACK_LIMIT_MS = Math.max(0, videoTimeLimitMinutes) * 60000; // Convert minutes to milliseconds, handle negative values

  // Membership system
  function checkMembership() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
      const [name, value] = cookie.trim().split('=');
      if (name === 'video_membership') {
        try {
          const membershipData = JSON.parse(decodeURIComponent(value));
          // Check if membership is valid (not expired)
          if (membershipData.expires > Date.now()) {
            return true;
          }
        } catch (e) {
          // Invalid cookie, remove it
          document.cookie = 'video_membership=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }
      }
    }
    return false;
  }

  function setMembership(membershipToken) {
    // Set cookie to expire in 1 year
    const expires = new Date();
    expires.setFullYear(expires.getFullYear() + 1);
    
    const membershipData = {
      token: membershipToken,
      expires: expires.getTime(),
      activated: Date.now()
    };
    
    document.cookie = `video_membership=${encodeURIComponent(JSON.stringify(membershipData))}; expires=${expires.toUTCString()}; path=/; SameSite=Strict`;
  }

  function resetMembership() {
    document.cookie = 'video_membership=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    location.reload();
  }

  function startPlaybackTimer() {
    // Skip timer if user has membership
    if (checkMembership()) {
      return;
    }
    
    // Skip timer if disabled (-1)
    if (videoTimeLimitMinutes === -1) {
      return;
    }
    
    // Show immediate paywall if set to 0
    if (videoTimeLimitMinutes === 0) {
      // Show paywall immediately, no delay
      setTimeout(() => {
        showCompactUpgradeMessage();
      }, 100); // Very short delay to ensure UI is ready
      return;
    }
    
    if (youtubeEmbedPlaybackTimer) {
      clearTimeout(youtubeEmbedPlaybackTimer);
    }
    
    youtubeEmbedPlaybackStartTime = Date.now() - youtubeEmbedElapsedTime;
    const remainingTime = PLAYBACK_LIMIT_MS - youtubeEmbedElapsedTime;
    
    if (remainingTime > 0) {
      youtubeEmbedPlaybackTimer = setTimeout(() => {
        showCompactUpgradeMessage();
      }, remainingTime);
    } else {
      showCompactUpgradeMessage();
    }
  }

  function stopPlaybackTimer() {
    if (youtubeEmbedPlaybackTimer) {
      clearTimeout(youtubeEmbedPlaybackTimer);
      youtubeEmbedPlaybackTimer = null;
    }
    if (youtubeEmbedPlaybackStartTime) {
      youtubeEmbedElapsedTime += Date.now() - youtubeEmbedPlaybackStartTime;
      youtubeEmbedPlaybackStartTime = null;
    }
  }

  function resetPlaybackTimer() {
    stopPlaybackTimer();
    youtubeEmbedElapsedTime = 0;
    youtubeEmbedPlaybackStartTime = null;
    if (youtubeEmbedPlaybackTimer) {
      clearTimeout(youtubeEmbedPlaybackTimer);
      youtubeEmbedPlaybackTimer = null;
    }
    hideCompactUpgradeMessage();
  }

  function showCompactUpgradeMessage() {
    // Stop the video
    if (player && player.pauseVideo) {
      player.pauseVideo();
    }
    
    // Find the parent container
    const playerContainer = document.querySelector('.custom-youtube-player') || document.querySelector('iframe').parentElement;
    if (!playerContainer) return;
    
    // Create or update compact upgrade message
    let upgradeMessage = playerContainer.querySelector('.compact-upgrade-message');
    if (!upgradeMessage) {
      upgradeMessage = document.createElement('div');
      upgradeMessage.className = 'compact-upgrade-message';
      upgradeMessage.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.85);
        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 100;
        text-align: center;
        padding: 10px;
        box-sizing: border-box;
      `;
      playerContainer.appendChild(upgradeMessage);
    }
    
    upgradeMessage.innerHTML = `
      <div style="max-width: 100%; font-size: clamp(0.7rem, 2vw, 1rem);">
        <div style="margin-bottom: 8px; font-weight: bold; color: #FFD700;">
          ‚è±Ô∏è ${videoTimeLimitMinutes} min limit reached
        </div>
        <div style="margin-bottom: 12px; font-size: 0.9em;">
          Get unlimited access
        </div>
        <button class="compact-upgrade-btn" style="
          background: linear-gradient(45deg, #4CAF50, #45a049);
          color: white;
          border: none;
          padding: 8px 16px;
          font-size: 0.85em;
          border-radius: 4px;
          cursor: pointer;
          box-shadow: 0 2px 4px rgba(0,0,0,0.3);
          transition: all 0.3s ease;
        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
          üîì Upgrade - $4.99
        </button>
        <div style="font-size: 0.7em; opacity: 0.8; margin-top: 8px;">
          One-time payment ‚Ä¢ Lifetime access
        </div>
      </div>
    `;
    
    // Add click handler for upgrade button
    const upgradeBtn = upgradeMessage.querySelector('.compact-upgrade-btn');
    if (upgradeBtn) {
      upgradeBtn.addEventListener('click', () => {
        // Redirect to main video page with upgrade flow
        window.location.href = '/video?upgrade=true';
      });
    }
  }

  function hideCompactUpgradeMessage() {
    const upgradeMessage = document.querySelector('.compact-upgrade-message');
    if (upgradeMessage) {
      upgradeMessage.remove();
    }
  }

  window.onYouTubeIframeAPIReady = function() {
    player = new YT.Player('youtube-player', {
      height: '100%',
      width: '100%',
      videoId: videoId,
      playerVars: playerVars,
      events: {
        'onReady': onPlayerReady,
      }
    });
  }

  function showControls() {
    const controls = document.querySelector('.custom-controls');
    const centerControls = document.querySelector('.center-controls');
    controls.style.opacity = '1';
    centerControls.style.opacity = '1';
    clearTimeout(controlsTimeout);
  }
  function hideControls() {
    const controls = document.querySelector('.custom-controls');
    const centerControls = document.querySelector('.center-controls');
  
    clearTimeout(controlsTimeout);

    if (isTouchDevice) {
      controlsTimeout = setTimeout(() => {
        if (player && player.getPlayerState() == YT.PlayerState.PLAYING) {
          centerControls.style.opacity = '0';
          setTimeout(() => {
            controls.style.opacity = '0';
          }, 800);
        }
      }, 1200);
    } else {
      // For non-touch devices, hide when playing
      if (player && player.getPlayerState() == YT.PlayerState.PLAYING) {
        setTimeout(() => {
          centerControls.style.opacity = '0';
          controls.style.opacity = '0';
        }, 1100);
      }
    }
  }
    function onPlayerReady(event) {
    player = event.target;
    
    // Reset timer when new video is loaded/ready
    resetPlaybackTimer();
    
    const centerControls = document.querySelector('.center-controls');
    const muteButton = document.getElementById('mute');
    const volumeSlider = document.getElementById('volume');
    const muteIcon = muteButton.querySelector('svg');

    const playerArea = document.querySelector('.custom-youtube-player');
    playerArea.addEventListener('click', function() {
      if (player.getPlayerState() == YT.PlayerState.PLAYING) {
        player.pauseVideo();
      } else {
        player.playVideo();
      }
    });

    centerControls.addEventListener('click', function(e) {
      e.stopPropagation();
      if (player.getPlayerState() == YT.PlayerState.PLAYING) {
        player.pauseVideo();
      } else {
        player.playVideo();
      }
    });

    const playPauseButton = document.getElementById('play-pause');
    const progressBar = document.getElementById('progress');
    function updatePlayPauseButton() {
      if (playPauseButton) {
        playPauseButton.textContent = player.getPlayerState() == YT.PlayerState.PLAYING ? '\u2590\u2590' : '\u25B6';
      }
    }

    player.addEventListener('onStateChange', updatePlayPauseButton);

    if (playPauseButton) {
      playPauseButton.addEventListener('click', function() {
        if (player.getPlayerState() == YT.PlayerState.PLAYING) {
          player.pauseVideo();
        } else {
          player.playVideo();
        }
      });
    }
    if (muteButton) {
      const muteIcon = document.getElementById('mute-icon');
      const unmutedPath = "M6.5 15c-0.13 0-0.258-0.051-0.354-0.146l-3.854-3.854h-1.793c-0.276 0-0.5-0.224-0.5-0.5v-5c0-0.276 0.224-0.5 0.5-0.5h1.793l3.854-3.854c0.143-0.143 0.358-0.186 0.545-0.108s0.309 0.26 0.309 0.462v13c0 0.202-0.122 0.385-0.309 0.462-0.062 0.026-0.127 0.038-0.191 0.038z";
      const mutedPath = "M15 9.674v1.326h-1.326l-1.674-1.674-1.674 1.674h-1.326v-1.326l1.674-1.674-1.674-1.674v-1.326h1.326l1.674 1.674 1.674-1.674h1.326v1.326l-1.674 1.674 1.674 1.674z M6.5 15c-0.13 0-0.258-0.051-0.354-0.146l-3.854-3.854h-1.793c-0.276 0-0.5-0.224-0.5-0.5v-5c0-0.276 0.224-0.5 0.5-0.5h1.793l3.854-3.854c0.143-0.143 0.358-0.186 0.545-0.108s0.309 0.26 0.309 0.462v13c0 0.202-0.122 0.385-0.309 0.462-0.062 0.026-0.127 0.038-0.191 0.038z";

      function updateMuteButton() {
        muteIcon.innerHTML = `<path d="${player.isMuted() ? mutedPath : unmutedPath}"></path>`;
        const muteLabel = document.querySelector('.mute-label');
        if (muteLabel) {
          muteLabel.classList.toggle('muted', player.isMuted());
        }
      }

      updateMuteButton(); 

      muteButton.addEventListener('click', function(e) {
        e.stopPropagation();
        const currentTime = player.getCurrentTime();
        if (player.isMuted()) {
          player.unMute();
        } else {
          player.mute();
        }
        player.seekTo(currentTime, true);
        updateMuteButton();
      });

      player.addEventListener('onVolumeChange', updateMuteButton);
    }
    if (progressBar) {
      player.addEventListener('onStateChange', function(event) {
        if (event.data == YT.PlayerState.PLAYING) {
          updateProgressBar();
        }
      });

      function updateSliderBackground(slider) {
        const value = (slider.value - slider.min) / (slider.max - slider.min) * 100;
        slider.style.background = `linear-gradient(to right, var(--theme-accent2) ${value}%, rgba(0, 0, 0, 0.5) ${value}%)`;
      }

      progressBar.addEventListener('input', function() {
        updateSliderBackground(this);
        const time = player.getDuration() * (this.value / 100);
        player.seekTo(time, true);
      });

      // Update progress bar continuously
      function updateProgressBar() {
        if (player && player.getCurrentTime && player.getDuration) {
          const progress = (player.getCurrentTime() / player.getDuration()) * 100;
          progressBar.value = progress;
          updateSliderBackground(progressBar);
        }
        requestAnimationFrame(updateProgressBar);
      }

      updateProgressBar();
    }
    if (volumeSlider) {
      volumeSlider.addEventListener('input', function(e) {
        e.stopPropagation();
        updateSliderBackground(this);
        player.setVolume(this.value);
      });
      
      // Add touchstart event listener to update volume when user starts touching the slider
      volumeSlider.addEventListener('touchstart', function() {
        updateSliderBackground(this);
        player.setVolume(this.value);
      });
      
      // Add touchmove event listener to update volume in real-time on touch devices
      volumeSlider.addEventListener('touchmove', function(event) {
        event.preventDefault(); // Prevent default touch behavior
        updateSliderBackground(this);
        player.setVolume(this.value);
      });
    }    if (loop) {
      player.addEventListener('onStateChange', function(event) {
        if (event.data === YT.PlayerState.ENDED) {
          player.cueVideoById({
            videoId: videoId,
            startSeconds: start,
            endSeconds: end
          });
          player.playVideo();
        }
      });
    }
    const controls = document.querySelector('.custom-controls');
    if (isTouchDevice) {
      controls.addEventListener('touchstart', showControls);
      controls.addEventListener('touchend', hideControls);
    } else {
      controls.addEventListener('mouseenter', showControls);
      controls.addEventListener('mouseleave', hideControls);
    }
    player.addEventListener('onStateChange', function(event) {
      if (event.data === YT.PlayerState.PLAYING) {
        hideControls();
        checkAndLoop();
        
        // If timer had previously expired and user is playing again, reset for new session
        if (youtubeEmbedElapsedTime >= PLAYBACK_LIMIT_MS) {
          resetPlaybackTimer();
        }
        
        startPlaybackTimer(); // Start timer when video starts playing
      } else if (event.data === YT.PlayerState.PAUSED || event.data === YT.PlayerState.ENDED) {
        showControls();
        stopPlaybackTimer(); // Stop timer when video is paused or ended
      }
    });
  }

  function updateProgressBar() {
    const progressBar = document.getElementById('progress');
    if (progressBar) {
      const interval = setInterval(function() {
        const progress = (player.getCurrentTime() / player.getDuration()) * 100;
        progressBar.value = progress;
        if (player.getPlayerState() !== YT.PlayerState.PLAYING) {
          clearInterval(interval);
        }
      }, 1000);
    }
  }

  function checkAndLoop() {
    const checkInterval = setInterval(() => {
      const currentTime = player.getCurrentTime();
      const videoStart = start || 0;
      if (end > 0) {
        if (currentTime >= end || currentTime < videoStart) {
          player.seekTo(videoStart, true);
          player.playVideo();
        }
      } else {
        if (currentTime >= player.getDuration()) {
          player.seekTo(videoStart, true);
          player.playVideo();
        }
      }
    }, 100);
  }

  // For iframe version, add timer functionality
  function setupIframeTimer() {
    const iframe = document.getElementById('youtube-iframe');
    if (iframe) {
      // Reset timer when iframe loads (new video)
      iframe.addEventListener('load', () => {
        resetPlaybackTimer(); // Reset timer for new video
        setTimeout(() => {
          if (!checkMembership() && videoTimeLimitMinutes !== -1) {
            startPlaybackTimer();
          }
        }, 2000); // Delay to ensure video starts
      });
      
      // Add click handler to iframe container for interaction-based timer
      const iframeContainer = iframe.parentElement;
      if (iframeContainer) {
        iframeContainer.addEventListener('click', () => {
          if (!checkMembership() && videoTimeLimitMinutes !== -1) {
            // Always reset timer state when user clicks to ensure fresh start
            resetPlaybackTimer();
            
            setTimeout(() => {
              startPlaybackTimer();
            }, 500);
          }
        });
      }
    }
  }

  // Initialize iframe timer if not using custom player
  if (document.getElementById('youtube-iframe')) {
    setupIframeTimer();
  }

  // Handle membership activation and reset from URL parameters
  window.addEventListener('DOMContentLoaded', () => {
    const params = new URLSearchParams(window.location.search);
    
    // Check for membership activation token
    const membershipToken = params.get('membership');
    if (membershipToken) {
      setMembership(membershipToken);
      
      // Show success message
      const successMessage = document.createElement('div');
      successMessage.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 12px 16px;
        border-radius: 6px;
        z-index: 1000;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        font-size: 14px;
        font-family: system-ui, -apple-system, sans-serif;
      `;
      successMessage.textContent = '‚úì Membership activated! Unlimited video access.';
      document.body.appendChild(successMessage);
      
      setTimeout(() => {
        successMessage.remove();
      }, 4000);
    }
    
    // Check for membership reset
    const resetMembershipParam = params.get('reset_membership');
    if (resetMembershipParam === 'true') {
      resetMembership();
    }
  });

  // Listen for stop all videos event
  document.addEventListener('stopAllVideos', () => {
    // Stop this instance's timer
    stopPlaybackTimer();
    
    // Stop custom player if it exists
    if (player && player.pauseVideo) {
      player.pauseVideo();
    }
    
    // For iframe version, the PostPreview already set src to about:blank
    // We don't need to do anything else as the video will be reloaded when clicked again
    
    // Reset timer state for this instance
    youtubeEmbedElapsedTime = 0;
    youtubeEmbedPlaybackStartTime = null;
    
    // Hide any upgrade messages
    hideCompactUpgradeMessage();
  });

  // Listen for custom reset timer events from PostPreview component
  document.addEventListener('resetVideoTimer', () => {
    // This event fires when a video is about to start
    // First ensure the iframe src is properly set (in case it was cleared)
    const iframe = document.getElementById('youtube-iframe');
    if (iframe && videoId) {
      const expectedSrc = `https://www.youtube.com/embed/${videoId}?autoplay=1&playlist=${videoId}&controls=${controls ? 1 : 0}&mute=${mute ? 1 : 0}&loop=${loop ? 1 : 0}&start=${start}&end=${end}&playsinline=1&modestbranding=1&rel=0&showinfo=0&fs=0&endscreen=0`;
      if (iframe.src !== expectedSrc) {
        iframe.src = expectedSrc;
      }
    }
    
    resetPlaybackTimer();
    
    // Start timer immediately when video becomes visible (unless disabled or premium)
    if (!checkMembership() && videoTimeLimitMinutes !== -1) {
      // Small delay to ensure the video embed is ready
      setTimeout(() => {
        startPlaybackTimer();
      }, 500);
    }
  });

  const tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  const firstScriptTag = document.getElementsByTagName('script')[0];
  if (firstScriptTag.parentNode) {
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  }
</script>
<style>
  .topblock{display:flex; width:100%; justify-content: center; position: absolute; top:0; height:60px; background:#000; z-index: 0;}
  .botblock{display:flex; width:100%; justify-content: center; position: absolute; bottom:0; height:220px; background:#000; z-index: 0;}

  @media (max-width: 48rem) {
    .topblock{display:flex; width:100%; justify-content: center; position: absolute; top:0; height:0px; background:#000;}
    .botblock{display:flex; width:100%; justify-content: center; position: absolute; bottom:0; height:50px; background:#000; z-index: 0;}
    .youtube-player{margin-top:60px;}
    .custom-youtube-player{margin-top:60px !important;}
    .bottom-tray{padding-bottom: 5px !important;}
  }

  .custom-youtube-player {
    width: 100%;
    margin: 0;
    padding: 0;
    position: relative;
    color:#fff;
    background:#222;
  }




  #youtube-player {

    aspect-ratio: auto;
  }
  .custom-controls {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    z-index: 1;
    background-color: rgba(0, 0, 0, 0.5);
    opacity: 0;
    transition: opacity 0.3s ease, background-color 0.3s ease;
    -webkit-backdrop-filter: blur(5px);
    backdrop-filter: blur(5px);
  }
  .custom-controls:hover {
    opacity: 1;
  }
  .custom-controls.paused {
    opacity: 1;
    background-color: rgba(0, 0, 0, .5); 
  }
  .center-controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    transition: opacity 0.1s ease;
    transition: opacity 0.1s ease;
    background:#000;
  }
  .play-pause-button {
    font-size: 3rem;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    z-index: 11;
  }

.play-pause-button {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        font-size: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 11;
    }


  .video-title {
    color: white;
    text-align: center;
    font-size:clamp(.8rem,3vw,3rem);
    margin-bottom:2vh;
  }
  .bottom-tray {
    display: flex;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.7);
    width:100%;
    justify-content: center;
    gap:1vw;
    z-index: 2;
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    max-width: 600px;
    margin:0 auto 0 auto;
    padding:0 3% 1vh 3%;
  }
  

  #mute, #volume {
    z-index: 2;
    position: relative;
  }

  #mute{color:var(--theme-accent2);}


  label{display:flex; flex-direction: column; gap:5px; font-size: clamp(.8rem,.9vw,1rem); align-items: center; }

  label span{filter: brightness(1.4);}
  :root[data-theme="dark"] label span{filter: brightness(.9);}

  #mute svg .volume-icon { display: block; }
  #mute svg .muted-icon { display: none;  }
  #mute.muted svg .volume-icon { display: none; }
  #mute.muted svg .muted-icon { display: block; }
  #mute svg {  
  width: 34px;
  height: 34px;
  fill: currentColor;
  filter: drop-shadow(0px 0px 1px #f6f3f3) !important;
  transition: background .3s ease-in-out;
  filter: brightness(1.4);
  stroke:1px;
}
#mute svg {fill: currentColor;  }



input[type="range"] {
  -webkit-appearance: none;
  width: 100%;
  background: rgba(255, 255, 255, 0.6);
  background: var(--theme-accent2);
  border-radius: 5px;
  background-image: linear-gradient(#fff, var(--theme-accent2)) ;
  background-size: 0% 100%;
  background-repeat: no-repeat;
  height: 10px;
  border-top:1px solid #222121;
  border-bottom:2px dotted #222121;
}

input[type="range"]#progress::-webkit-slider-thumb {
    -webkit-appearance: none;
  height: 30px;
  width: 10px;
  border-radius: var(--border-radius);
  cursor: ew-resize;
  box-shadow: 0 0 0 3px #111;
  transition: background .3s ease-in-out;
  border:1px solid #444;
  transition: background .3s ease-in-out;
  filter: brightness(1.4);
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  height: 25px;
  width: 25px;
  border-radius: 50%;
  background: var(--theme-accent2);
  cursor: ew-resize;
  box-shadow: 0 0 0 3px #111;
  transition: background .3s ease-in-out;
  border:1px solid #444;
  filter: brightness(1.4);
  z-index: 2;
}

  .mute-label {
    transition: color 0.3s ease;
    display:flex;
    flex-direction: column;
    gap:2px;
    align-content: center;
    align-self: center;
    justify-content: center;
  }

  .mute-label.muted {
    color: red;
  }

  /* Compact upgrade message styles */
  .compact-upgrade-message {
    font-family: system-ui, -apple-system, sans-serif;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .compact-upgrade-message .compact-upgrade-btn {
    transition: all 0.3s ease;
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .compact-upgrade-message .compact-upgrade-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 8px rgba(0,0,0,0.4);
  }

  .compact-upgrade-message .compact-upgrade-btn:active {
    transform: scale(0.95);
  }

  /* Responsive adjustments for very small containers */
  @media (max-width: 320px) {
    .compact-upgrade-message {
      padding: 5px;
    }
    
    .compact-upgrade-message .compact-upgrade-btn {
      padding: 6px 12px;
      font-size: 0.75em;
    }
  }

  /* Ensure the iframe container can handle the overlay */
  .iframe-youtube-player {
    position: relative;
    overflow: hidden;
  }
</style>




