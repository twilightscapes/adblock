---
import type { SiteMeta } from "@/types";
import BaseHead from "@/components/BaseHead.astro";
import SkipLink from "@/components/SkipLink.astro";
import ThemeProvider from "@/components/ThemeProvider.astro";
import Footer from "@/components/layout/Footer.astro";
import Header from "@/components/layout/Header.astro";
import { siteConfig } from "@/site-config";
import { getEntry } from 'astro:content'; // Add this import at the top
import { ViewTransitions } from 'astro:transitions';

// import SiteLinks from '@/components/SocialList.astro';
import DynamicTheme from '@/components/DynamicTheme.astro';




// function isRunningStandalone() {
//     if (typeof window !== 'undefined') {
//         return window.matchMedia('(display-mode: standalone)').matches;
//     }
//     return;
// }

interface Props {
  meta?: {
    title?: string;
    description?: string;
    ogImage?: string;
    articleDate?: Date | string;
  };
  title?: string;
  description?: string;
  themeMode?: 'light' | 'dark' | 'user';
  articleDate?: Date | string;
  ogImage?: string; 
}

const { 
  meta,
  title,
  description,
  themeMode = 'user',
  articleDate,
  ogImage = '/socialCard.webp'  
} = Astro.props;

// Add error handling for content entries
let showFooter = false;
let enableImageBlur = true;
let siteDisclaimer = '';

try {
  const siteSettings = await getEntry('siteSettings', 'main');
  if (siteSettings) {
    ({ showFooter = false, enableImageBlur = true } = siteSettings.data);
  } else {
    console.warn('Site settings not found, using defaults');
  }

  const language = await getEntry('language', 'index');
  if (language) {
    siteDisclaimer = language.data.siteDisclaimer ?? '';
  } else {
    console.warn('Language settings not found');
  }
} catch (error) {
  console.error('Error loading settings:', error);
}

const pageTitle = title || meta?.title;
const pageDescription = description || meta?.description;
const pageArticleDate = (articleDate instanceof Date)
  ? articleDate.toISOString()
  : (typeof articleDate === 'string'
      ? articleDate
      : (meta?.articleDate instanceof Date
          ? meta.articleDate.toISOString()
          : meta?.articleDate));
const pageOgImage = ogImage || meta?.ogImage;


---

<html lang="en" data-theme="light">
	<head>
		<!-- <ViewTransitions /> -->
		<script>
            function getInitialTheme() {
                const savedTheme = localStorage.getItem('theme');
                return savedTheme || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            }
            document.documentElement.dataset.theme = getInitialTheme();
        </script>
        
        <ThemeProvider themeMode={siteConfig.themeMode} />
        <BaseHead 
            title={pageTitle} 
            description={pageDescription} 
            articleDate={pageArticleDate} 
            ogImage={pageOgImage} 
        />
        <DynamicTheme />
    </head>
    
    <body>
        <SkipLink />
        <div id="nav-container"></div>
        <Header></Header>
        <div id="top"></div>
        <main id="main">
            <slot/>
        </main>

        {siteDisclaimer && (
            <div class="" style="display:grid; place-content: center; padding:0 4%;">{siteDisclaimer}</div>
                )}

        { showFooter && (
            <Footer />
        )}
    </body>

    <script is:inline define:vars={{ enableImageBlur }}>
        function initializeImageLoader() {
            const blurEnabled = typeof enableImageBlur !== 'undefined' ? enableImageBlur : true;
            console.log('Image loader initialized, blur enabled:', blurEnabled);

            if (!blurEnabled) return;

            const images = document.querySelectorAll('img');
            images.forEach(img => {
                // Apply initial blur
                img.style.filter = 'blur(20px)';
                img.style.transition = 'filter 0.5s ease-in-out';

                if (img.complete) {
                    img.style.filter = 'blur(0px)';
                } else {
                    img.addEventListener('load', function() {
                        this.style.filter = 'blur(0px)';
                    });
                }
            });
        }

        function initializeScrollListener() {
            const horizontalScrollClassName = 'horizontal-slider';
            const scrollMultiplier = 1.1;

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const target = entry.target;

                        const handleWheel = (event) => {
                            if (target.scrollWidth > target.clientWidth) {
                                event.preventDefault();
                                const scrollAmount = (event.deltaX || event.deltaY) * scrollMultiplier;
                                target.scrollLeft += scrollAmount;
                            }
                        };

                        target.addEventListener('wheel', handleWheel, { passive: false });

                        let touchStartX;
                        target.addEventListener('touchstart', (event) => {
                            touchStartX = event.touches[0].clientX;
                        }, { passive: true });

                        target.addEventListener('touchmove', (event) => {
                            if (!touchStartX) return;
                            const touchEndX = event.touches[0].clientX;
                            const diff = touchStartX - touchEndX;
                            target.scrollLeft += diff;
                            touchStartX = touchEndX;
                        }, { passive: true });
                    }
                });
            }, { threshold: 0.1 });

            document.querySelectorAll(`.${horizontalScrollClassName}`).forEach(el => {
                observer.observe(el);
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            initializeImageLoader();
            initializeScrollListener();
        });
        document.addEventListener('astro:page-load', () => {
            initializeImageLoader();
            initializeScrollListener();
        });
        window.addEventListener('viewModeChanged', initializeScrollListener);
    </script>

    <script>
    // Global VideoPreferences class - Available to all components
    class VideoPreferencesManager {
      private static STORAGE_KEY = 'video-preferences';
      
      static getPreferences() {
        if (typeof window === 'undefined') {
          return { muted: false };
        }
        
        try {
          const stored = localStorage.getItem(this.STORAGE_KEY);
          if (stored) {
            return JSON.parse(stored);
          }
        } catch (e) {
          console.warn('Could not load video preferences:', e);
        }
        
        return { muted: false };
      }
      
      static setMuted(muted: boolean) {
        if (typeof window === 'undefined') return;
        
        try {
          const preferences = this.getPreferences();
          preferences.muted = muted;
          localStorage.setItem(this.STORAGE_KEY, JSON.stringify(preferences));
          
          // Update all video mute states
          this.updateAllVideoMuteStates(muted);
          
          // Dispatch event for other components
          window.dispatchEvent(new CustomEvent('video-preferences-changed', {
            detail: preferences
          }));
        } catch (e) {
          console.warn('Could not save video preferences:', e);
        }
      }
      
      static updateAllVideoMuteStates(muted: boolean) {
        // Update all YouTube iframes
        document.querySelectorAll('iframe[src*="youtube.com/embed/"]').forEach((element) => {
          const iframe = element as HTMLIFrameElement;
          const currentSrc = iframe.src;
          const url = new URL(currentSrc);
          
          if (muted) {
            url.searchParams.set('mute', '1');
          } else {
            url.searchParams.delete('mute');
          }
          
          if (iframe.src !== url.toString()) {
            iframe.src = url.toString();
          }
        });
        
        // Update all mute toggle buttons
        document.querySelectorAll('.mute-toggle-btn').forEach((element) => {
          const btn = element as HTMLButtonElement;
          btn.textContent = muted ? 'ðŸ”‡' : 'ðŸ”Š';
          btn.setAttribute('aria-label', muted ? 'Unmute videos' : 'Mute videos');
        });
      }
      
      static isMuted() {
        return this.getPreferences().muted;
      }
    }
    
    // Make it globally available
    (window as any).VideoPreferences = VideoPreferencesManager;
    </script>


</html>
